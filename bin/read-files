#!/bin/bash
# Usage: read-files.sh directory pattern cmd_id tmp_dir
# $1 is directory
# $2 is pattern
# $3 is cmd_id
# $4 is tmp_dir

# Set the directory to the given subdir of the current working directory or to an absolute path
dir="$1"
pattern="$2"
cmd_id="$3"
tmp_dir="$4"
chunk_size=20480  # 20KB chunk size

# Resolve the directory path if it's relative
if ! cd "$dir"; then
    echo "Invalid directory path: $dir"
    exit 1
fi
dir=$(pwd)
cd - >/dev/null  # Return to previous directory

echo "BEGIN"

# Loop through files matching the given pattern
find "$dir" -type f -name "$pattern" | while IFS= read -r filePath; do
    relativePath="${filePath#$dir/}"
    chunk_count=0  # Initialize chunk counter for each file

    if [ -e "$filePath" ]; then
        echo "    dbm_utility_krn.output_line(p_cmd_id=>$cmd_id, p_type=>'OUT', p_base64=>FALSE, p_text=>'#!$relativePath');"

        # Initialize the offset for reading in chunks
        offset=0

        # Read the file in chunks and encode each chunk in base64
        while true; do
            # Extract a chunk from the file
            chunk=$(dd if="$filePath" bs=1 skip=$offset count=$chunk_size 2>/dev/null | base64 -w 64)

            # Break the loop if no more data is read (end of file)
            if [[ -z "$chunk" ]]; then
                break
            fi

            # Output the encoded chunk as a separate dbm_utility_krn.output_line command
            echo "    dbm_utility_krn.output_line(p_cmd_id=>$cmd_id, p_type=>'OUT', p_base64=>TRUE, p_chunk=>$chunk_count, p_text=>'"
            echo "$chunk"
            echo "');"

            # Increment the chunk count
            chunk_count=$((chunk_count + 1))

            # Increase the offset by chunk size for the next read
            offset=$((offset + chunk_size))
        done
    fi
done

echo "COMMIT;"
echo "END;"
echo "/"